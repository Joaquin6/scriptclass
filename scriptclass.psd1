#
# Module manifest for module 'ScriptClass'
#
# Generated by: adamed
#
# Generated on: 9/12/2017
#

@{

# Script module or binary module file associated with this manifest.
# Be VERY careful here -- 'scriptclass.psm1' vs '.\scriptclass.ps1' do
# different things -- the latter will cause publish-module to find
# a scriptclass.psm1 in a parent directory, and then it will publish
# the parent directory rather than something nested underneath as the
# output of a build! Do not precede with '.'!
RootModule = 'scriptclass.psm1'

# Version number of this module.
ModuleVersion = '0.20.0'

# Supported PSEditions
CompatiblePSEditions = @('Desktop', 'Core')

# ID used to uniquely identify this module
GUID = '9b0f5599-0498-459c-9a47-125787b1af19'

# Author of this module
Author = 'Adam Edwards'

# Company or vendor of this module
CompanyName = 'Modulus Group'

# Copyright statement for this module
Copyright = '(c) 2019 Adam Edwards.'

# Description of the functionality provided by this module
Description = "Class definition extensions for PowerShell's object-based type system"

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '5.1'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @(
    '=>'
    '::>'
    'Add-MockInScriptClassScope'
    'Add-ScriptClassMock'
    'Enable-ScriptClassVerbosePreference'
    'Get-ScriptClass'
    'Import-Assembly'
    'Import-Script'
    'Initialize-ScriptClassTest'
    'Invoke-Method'
    'New-ScriptClass'
    'New-ScriptObject'
    'New-ScriptObjectMock'
    'Remove-ScriptClassMock'
    'Test-ScriptObject'
)

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
# CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = @(':', 'ScriptClassVerbosePreference') # : is actually $::

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @('new-so', 'scriptclass', 'withobject', 'Mock-ScriptClassMethod', 'Unmock-ScriptClassMethod')

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
FileList = @(
    './scriptclass.psd1'
    './scriptclass.psm1'
    'src/cmdlet.ps1'
    'src/scriptclass.ps1'
    'src/scriptobject.ps1'
    'src/cmdlet/Add-ScriptClassMock.ps1'
    'src/cmdlet/Add-MockInScriptClassScope.ps1'
    'src/cmdlet/Enable-ScriptClassVerbosePreference.ps1'
    'src/cmdlet/Get-ScriptClass.ps1'
    'src/cmdlet/Import-Assembly.ps1'
    'src/cmdlet/Import-Script.ps1'
    'src/cmdlet/Invoke-Method.ps1'
    'src/cmdlet/New-ScriptClass.ps1'
    'src/cmdlet/New-ScriptObject.ps1'
    'src/cmdlet/New-ScriptObjectMock.ps1'
    'src/cmdlet/Test-ScriptObject.ps1'
    'src/cmdlet/Remove-ScriptClassMock.ps1'
    'src/codeshare/assembly.ps1'
    'src/codeshare/script.ps1'
    'src/scriptobject/ClassManager.ps1'
    'src/scriptobject/common/ClassDefinition.ps1'
    'src/scriptobject/common/NativeObjectBuilder.ps1'
    'src/scriptobject/common/ScriptClassSpecification.ps1'
    'src/scriptobject/dsl/ClassDsl.ps1'
    'src/scriptobject/dsl/MethodDsl.ps1'
    'src/scriptobject/mock/MethodMocker.ps1'
    'src/scriptobject/mock/MethodPatcher.ps1'
    'src/scriptobject/mock/PatchedClassMethod.ps1'
    'src/scriptobject/mock/PatchedObject.ps1'
    'src/scriptobject/type/ClassBuilder.ps1'
    'src/scriptobject/type/ScriptClassBuilder.ps1'
)

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = @('class', 'object', 'PSCustomObject', 'netcore', 'PSEdition_Desktop', 'PSEdition_Core')

        # A URL to the license for this module.
        LicenseUri = 'http://www.apache.org/licenses/LICENSE-2.0'

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/adamedx/scriptclass'

        # A URL to an icon representing this module.
        IconUri = 'https://raw.githubusercontent.com/adamedx/scriptclass/master/assets/ScriptClassIco.png'

        # ReleaseNotes of this module
        ReleaseNotes = @'
# ScriptClass 0.20.0 Release Notes

This version of *ScriptClass* contains a significant number of breaking changes, though consumers of previous versions
should be able to migrate to this version with relatively straightforward modifications -- the overall
philosphy of the library remains intact. These changes are the key milestone in moving this module to version 1.0.

The most significant changes are at the implementation layer, where refactoring and simplification should
make the code more reliable at runtime, enable better isolation of PowerShell modules built on it from
dependencies on implementation of *ScriptClass* or other modules depending on it, and even improve runtime performance.
In general, the codebase is more modular and now aligns to an explicit logical arrangement, making it easier
to maintain and modify.

## New features

* The `::>` operator now supports invocation on class instances, i.e. given an instance, it will call the
static member of that instance's class. It can still be used with class names as the target just as before.
* Script scope variables are inaccessible to code within a ScriptClass method -- this protects the method
code from unintended / confusing behavvior. This is also a breaking change
* Parameters may be passed to the script block used to define a class via `New-ScriptClass`. This is a workaround
for the breaking change above for cases where one explicitly wants outside state available to the method
* Module initialization occurs only within module scope -- no pre-initialization code is executed through the
`ScriptsToProcess` key of the manifest, resulting in better isolation and reliability
`Import-Script` now supports the `AnyExtension` option to allow any file, not just files ending with
the `ps1` extension, to be imported

## Breaking changes

* `Add-ScriptClass` is renamed to `New-ScriptClass`
* `Get-Class` is renamed to `Get-ScriptClass`
* The `with` alias is renamed to `withobject`
* Script scope variables are no longer accessible from *ScriptClass* methods -- use the `ArgumentList` parameter
of `New-ScriptClass` / `ScriptClass` to pass such variables to the *ScriptClass* definition
* The `PSCmdlet` automatic variable is no longer passed to *ScriptClass* methods
* Verbose output is not visible from *ScriptClass* methods unless a caller earlier in the stack has invoked the
new `Enable-ScriptClassVerbosePreference` command
* The `gls` alias directs to the new `Get-GraphItemWithMetadata` command instead of `Get-GraphChildItem`
* The `PSTypeName` property is no longer part of *ScriptClass* objects
* The `Get-ScriptClass` command returns a different data structure than the old `Get-Class` command

## Fixed defects

* The module's internal variables are now isolated within the module -- previously variables and
  functions at script scope were available to any callers outside the module, allowing them
  to modify *ScriptClass* internal state. And it was quite possible that *ScriptClass* internal state
  collided with variables or functions in other modules. This is no longer the case as *ScriptClass*
  now behaves like an ordinary Powershell module. This means its features can be accessed by
  other modules by including *ScriptClass* in the `NestedModules` element of those module manifests.

'@

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}
